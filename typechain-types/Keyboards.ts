/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export declare namespace Keyboards {
  export type KeyboardStruct = {
    kind: BigNumberish;
    isPBT: boolean;
    filter: string;
    owner: string;
  };

  export type KeyboardStructOutput = [number, boolean, string, string] & {
    kind: number;
    isPBT: boolean;
    filter: string;
    owner: string;
  };
}

export interface KeyboardsInterface extends utils.Interface {
  contractName: "Keyboards";
  functions: {
    "create(uint8,bool,string)": FunctionFragment;
    "createdKeyboards(uint256)": FunctionFragment;
    "getKeyboards()": FunctionFragment;
    "tip(uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "create",
    values: [BigNumberish, boolean, string]
  ): string;
  encodeFunctionData(
    functionFragment: "createdKeyboards",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getKeyboards",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "tip", values: [BigNumberish]): string;

  decodeFunctionResult(functionFragment: "create", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "createdKeyboards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getKeyboards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "tip", data: BytesLike): Result;

  events: {
    "KeyboardCreated(tuple)": EventFragment;
    "TipSent(address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "KeyboardCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TipSent"): EventFragment;
}

export type KeyboardCreatedEvent = TypedEvent<
  [Keyboards.KeyboardStructOutput],
  { keyboard: Keyboards.KeyboardStructOutput }
>;

export type KeyboardCreatedEventFilter = TypedEventFilter<KeyboardCreatedEvent>;

export type TipSentEvent = TypedEvent<
  [string, BigNumber],
  { recipient: string; amount: BigNumber }
>;

export type TipSentEventFilter = TypedEventFilter<TipSentEvent>;

export interface Keyboards extends BaseContract {
  contractName: "Keyboards";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: KeyboardsInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    create(
      _kind: BigNumberish,
      _isPBT: boolean,
      _filter: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    createdKeyboards(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [number, boolean, string, string] & {
        kind: number;
        isPBT: boolean;
        filter: string;
        owner: string;
      }
    >;

    getKeyboards(
      overrides?: CallOverrides
    ): Promise<[Keyboards.KeyboardStructOutput[]]>;

    tip(
      _index: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  create(
    _kind: BigNumberish,
    _isPBT: boolean,
    _filter: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  createdKeyboards(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [number, boolean, string, string] & {
      kind: number;
      isPBT: boolean;
      filter: string;
      owner: string;
    }
  >;

  getKeyboards(
    overrides?: CallOverrides
  ): Promise<Keyboards.KeyboardStructOutput[]>;

  tip(
    _index: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    create(
      _kind: BigNumberish,
      _isPBT: boolean,
      _filter: string,
      overrides?: CallOverrides
    ): Promise<void>;

    createdKeyboards(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [number, boolean, string, string] & {
        kind: number;
        isPBT: boolean;
        filter: string;
        owner: string;
      }
    >;

    getKeyboards(
      overrides?: CallOverrides
    ): Promise<Keyboards.KeyboardStructOutput[]>;

    tip(_index: BigNumberish, overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    "KeyboardCreated(tuple)"(keyboard?: null): KeyboardCreatedEventFilter;
    KeyboardCreated(keyboard?: null): KeyboardCreatedEventFilter;

    "TipSent(address,uint256)"(
      recipient?: null,
      amount?: null
    ): TipSentEventFilter;
    TipSent(recipient?: null, amount?: null): TipSentEventFilter;
  };

  estimateGas: {
    create(
      _kind: BigNumberish,
      _isPBT: boolean,
      _filter: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    createdKeyboards(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getKeyboards(overrides?: CallOverrides): Promise<BigNumber>;

    tip(
      _index: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    create(
      _kind: BigNumberish,
      _isPBT: boolean,
      _filter: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    createdKeyboards(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getKeyboards(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tip(
      _index: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
